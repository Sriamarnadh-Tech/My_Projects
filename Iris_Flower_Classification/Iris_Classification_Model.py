# -*- coding: utf-8 -*-
"""Iris_Classification.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EE5KSzbF1c65fhxCedn9KHUdmflA5N8K
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns

"""#Data Preprocessing"""

d1 = pd.read_csv('IRIS.csv')
d1.head()

d1.info()

d1.shape

d1.describe()

d1.isnull().sum()

d1['species'].value_counts()

d1.drop_duplicates(inplace=True)

"""# EDA"""

plt.figure(figsize=(15,15))
sns.boxplot(x='species',y='sepal_length',data=d1.sort_values('sepal_length',ascending=False))

d1.plot(kind='scatter',x='sepal_width',y='sepal_length')

sns.jointplot(x="sepal_length", y="sepal_width", data=d1, size=5)

sns.pairplot(d1, hue="species", size=3)

d1.boxplot(by="species", figsize=(12, 6))

plt.figure(figsize=(15,15))
sns.catplot(x='species',y='sepal_width',data=d1.sort_values('sepal_width',ascending=False),kind='boxen')

plt.figure(figsize=(15,10))
plt.subplot(2,2,1)
sns.violinplot(x='species',y='petal_length',data=d1)
plt.subplot(2,2,2)
sns.violinplot(x='species',y='petal_width',data=d1)
plt.subplot(2,2,3)
sns.violinplot(x='species',y='sepal_length',data=d1)
plt.subplot(2,2,4)
sns.violinplot(x='species',y='sepal_width',data=d1)

X=d1.drop('species',axis=1)
y=d1['species']

from keras.models import Sequential
from keras.layers import Dense
from keras.utils import to_categorical

d1['species'] = pd.Categorical(d1.species)
d1['species'] = d1.species.cat.codes
# Turn response variable into one-hot response vectory = to_categorical(df.response)
y = to_categorical(d1.species)

from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.30,stratify=y,random_state=123)

model=Sequential()
model.add(Dense(100,activation='relu',input_shape=(4,)))

model.add(Dense(3,activation='softmax'))

model.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'])

history=model.fit(X_train,y_train,epochs=100,validation_data=(X_test, y_test))

model.evaluate(X_test,y_test)

model.save('Iris.h5')

pred = model.predict(X_test[:10])
print(pred)

history.history['accuracy']

history.history['val_accuracy']

plt.figure()


plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])

plt.title('Model accuracy')
plt.ylabel('Accuracy')
plt.xlabel('Epoch')
plt.legend(['Train', 'Test'])
plt.show()
